// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: catalog-movies-api.proto

package proto_management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieServiceClient interface {
	GetMovies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MovieService_GetMoviesClient, error)
	GetMovieById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*MovieResponse, error)
	RegisterMovie(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*Id, error)
	RegisterMoviesInBatch(ctx context.Context, opts ...grpc.CallOption) (MovieService_RegisterMoviesInBatchClient, error)
	DeleteMovie(ctx context.Context, in *Id, opts ...grpc.CallOption) (*MovieResponse, error)
}

type movieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceClient(cc grpc.ClientConnInterface) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) GetMovies(ctx context.Context, in *Empty, opts ...grpc.CallOption) (MovieService_GetMoviesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MovieService_ServiceDesc.Streams[0], "/proto_management.MovieService/GetMovies", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieServiceGetMoviesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MovieService_GetMoviesClient interface {
	Recv() (*MoviesListResponse, error)
	grpc.ClientStream
}

type movieServiceGetMoviesClient struct {
	grpc.ClientStream
}

func (x *movieServiceGetMoviesClient) Recv() (*MoviesListResponse, error) {
	m := new(MoviesListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieServiceClient) GetMovieById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*MovieResponse, error) {
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, "/proto_management.MovieService/GetMovieById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) RegisterMovie(ctx context.Context, in *Movie, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/proto_management.MovieService/RegisterMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) RegisterMoviesInBatch(ctx context.Context, opts ...grpc.CallOption) (MovieService_RegisterMoviesInBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &MovieService_ServiceDesc.Streams[1], "/proto_management.MovieService/RegisterMoviesInBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieServiceRegisterMoviesInBatchClient{stream}
	return x, nil
}

type MovieService_RegisterMoviesInBatchClient interface {
	Send(*Movie) error
	CloseAndRecv() (*MovieResponse, error)
	grpc.ClientStream
}

type movieServiceRegisterMoviesInBatchClient struct {
	grpc.ClientStream
}

func (x *movieServiceRegisterMoviesInBatchClient) Send(m *Movie) error {
	return x.ClientStream.SendMsg(m)
}

func (x *movieServiceRegisterMoviesInBatchClient) CloseAndRecv() (*MovieResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MovieResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieServiceClient) DeleteMovie(ctx context.Context, in *Id, opts ...grpc.CallOption) (*MovieResponse, error) {
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, "/proto_management.MovieService/DeleteMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
// All implementations must embed UnimplementedMovieServiceServer
// for forward compatibility
type MovieServiceServer interface {
	GetMovies(*Empty, MovieService_GetMoviesServer) error
	GetMovieById(context.Context, *Id) (*MovieResponse, error)
	RegisterMovie(context.Context, *Movie) (*Id, error)
	RegisterMoviesInBatch(MovieService_RegisterMoviesInBatchServer) error
	DeleteMovie(context.Context, *Id) (*MovieResponse, error)
	mustEmbedUnimplementedMovieServiceServer()
}

// UnimplementedMovieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServiceServer struct {
}

func (UnimplementedMovieServiceServer) GetMovies(*Empty, MovieService_GetMoviesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetMovieById(context.Context, *Id) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieById not implemented")
}
func (UnimplementedMovieServiceServer) RegisterMovie(context.Context, *Movie) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMovie not implemented")
}
func (UnimplementedMovieServiceServer) RegisterMoviesInBatch(MovieService_RegisterMoviesInBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterMoviesInBatch not implemented")
}
func (UnimplementedMovieServiceServer) DeleteMovie(context.Context, *Id) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {}

// UnsafeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceServer will
// result in compilation errors.
type UnsafeMovieServiceServer interface {
	mustEmbedUnimplementedMovieServiceServer()
}

func RegisterMovieServiceServer(s grpc.ServiceRegistrar, srv MovieServiceServer) {
	s.RegisterService(&MovieService_ServiceDesc, srv)
}

func _MovieService_GetMovies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieServiceServer).GetMovies(m, &movieServiceGetMoviesServer{stream})
}

type MovieService_GetMoviesServer interface {
	Send(*MoviesListResponse) error
	grpc.ServerStream
}

type movieServiceGetMoviesServer struct {
	grpc.ServerStream
}

func (x *movieServiceGetMoviesServer) Send(m *MoviesListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MovieService_GetMovieById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetMovieById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_management.MovieService/GetMovieById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetMovieById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_RegisterMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Movie)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).RegisterMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_management.MovieService/RegisterMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).RegisterMovie(ctx, req.(*Movie))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_RegisterMoviesInBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MovieServiceServer).RegisterMoviesInBatch(&movieServiceRegisterMoviesInBatchServer{stream})
}

type MovieService_RegisterMoviesInBatchServer interface {
	SendAndClose(*MovieResponse) error
	Recv() (*Movie, error)
	grpc.ServerStream
}

type movieServiceRegisterMoviesInBatchServer struct {
	grpc.ServerStream
}

func (x *movieServiceRegisterMoviesInBatchServer) SendAndClose(m *MovieResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *movieServiceRegisterMoviesInBatchServer) Recv() (*Movie, error) {
	m := new(Movie)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MovieService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_management.MovieService/DeleteMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteMovie(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieService_ServiceDesc is the grpc.ServiceDesc for MovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_management.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovieById",
			Handler:    _MovieService_GetMovieById_Handler,
		},
		{
			MethodName: "RegisterMovie",
			Handler:    _MovieService_RegisterMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MovieService_DeleteMovie_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMovies",
			Handler:       _MovieService_GetMovies_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RegisterMoviesInBatch",
			Handler:       _MovieService_RegisterMoviesInBatch_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "catalog-movies-api.proto",
}
